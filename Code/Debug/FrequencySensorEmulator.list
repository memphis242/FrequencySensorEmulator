
FrequencySensorEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002668  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002900  08002900  00003900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002910  08002910  00003910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002914  08002914  00003914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002918  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  08002928  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  08002928  0000407c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ccef  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000197e  00000000  00000000  00010d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b90  00000000  00000000  000126b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000008ec  00000000  00000000  00013240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035827  00000000  00000000  00013b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d36f  00000000  00000000  00049353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a094  00000000  00000000  000566c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b0756  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003048  00000000  00000000  001b079c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  001b37e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080028e8 	.word	0x080028e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080028e8 	.word	0x080028e8

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fb24 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f806 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f8bc 	bl	8000460 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002e8:	f000 f86c 	bl	80003c4 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <main+0x14>

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09c      	sub	sp, #112	@ 0x70
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002fa:	224c      	movs	r2, #76	@ 0x4c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fac6 	bl	8002890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2220      	movs	r2, #32
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fac0 	bl	8002890 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fe81 	bl	8001018 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000316:	2300      	movs	r3, #0
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	4b28      	ldr	r3, [pc, #160]	@ (80003bc <SystemClock_Config+0xcc>)
 800031c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800031e:	4a27      	ldr	r2, [pc, #156]	@ (80003bc <SystemClock_Config+0xcc>)
 8000320:	f023 0301 	bic.w	r3, r3, #1
 8000324:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000326:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <SystemClock_Config+0xcc>)
 8000328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	4b23      	ldr	r3, [pc, #140]	@ (80003c0 <SystemClock_Config+0xd0>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000338:	4a21      	ldr	r2, [pc, #132]	@ (80003c0 <SystemClock_Config+0xd0>)
 800033a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <SystemClock_Config+0xd0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800034c:	bf00      	nop
 800034e:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <SystemClock_Config+0xd0>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800035a:	d1f8      	bne.n	800034e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	2302      	movs	r3, #2
 800035e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000360:	2301      	movs	r3, #1
 8000362:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000364:	2340      	movs	r3, #64	@ 0x40
 8000366:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000368:	2300      	movs	r3, #0
 800036a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fe8b 	bl	800108c <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800037c:	f000 f9a2 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	233f      	movs	r3, #63	@ 0x3f
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 facb 	bl	8001940 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003b0:	f000 f988 	bl	80006c4 <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3770      	adds	r7, #112	@ 0x70
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	58000400 	.word	0x58000400
 80003c0:	58024800 	.word	0x58024800

080003c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003e2:	4b1e      	ldr	r3, [pc, #120]	@ (800045c <MX_TIM2_Init+0x98>)
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	@ (800045c <MX_TIM2_Init+0x98>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <MX_TIM2_Init+0x98>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003f6:	4b19      	ldr	r3, [pc, #100]	@ (800045c <MX_TIM2_Init+0x98>)
 80003f8:	f04f 32ff 	mov.w	r2, #4294967295
 80003fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	@ (800045c <MX_TIM2_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	@ (800045c <MX_TIM2_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800040a:	4814      	ldr	r0, [pc, #80]	@ (800045c <MX_TIM2_Init+0x98>)
 800040c:	f001 fdc8 	bl	8001fa0 <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000416:	f000 f955 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800041e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	@ (800045c <MX_TIM2_Init+0x98>)
 8000428:	f001 ff18 	bl	800225c <HAL_TIM_ConfigClockSource>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000432:	f000 f947 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	@ (800045c <MX_TIM2_Init+0x98>)
 8000444:	f002 f978 	bl	8002738 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800044e:	f000 f939 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3720      	adds	r7, #32
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2400002c 	.word	0x2400002c

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	@ 0x30
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 031c 	add.w	r3, r7, #28
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b8c      	ldr	r3, [pc, #560]	@ (80006a8 <MX_GPIO_Init+0x248>)
 8000478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800047c:	4a8a      	ldr	r2, [pc, #552]	@ (80006a8 <MX_GPIO_Init+0x248>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000486:	4b88      	ldr	r3, [pc, #544]	@ (80006a8 <MX_GPIO_Init+0x248>)
 8000488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	61bb      	str	r3, [r7, #24]
 8000492:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000494:	4b84      	ldr	r3, [pc, #528]	@ (80006a8 <MX_GPIO_Init+0x248>)
 8000496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800049a:	4a83      	ldr	r2, [pc, #524]	@ (80006a8 <MX_GPIO_Init+0x248>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004a4:	4b80      	ldr	r3, [pc, #512]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b7d      	ldr	r3, [pc, #500]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004b8:	4a7b      	ldr	r2, [pc, #492]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004c2:	4b79      	ldr	r3, [pc, #484]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b75      	ldr	r3, [pc, #468]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004d6:	4a74      	ldr	r2, [pc, #464]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e0:	4b71      	ldr	r3, [pc, #452]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	4b6e      	ldr	r3, [pc, #440]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004f4:	4a6c      	ldr	r2, [pc, #432]	@ (80006a8 <MX_GPIO_Init+0x248>)
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004fe:	4b6a      	ldr	r3, [pc, #424]	@ (80006a8 <MX_GPIO_Init+0x248>)
 8000500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000504:	f003 0310 	and.w	r3, r3, #16
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800050c:	4b66      	ldr	r3, [pc, #408]	@ (80006a8 <MX_GPIO_Init+0x248>)
 800050e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000512:	4a65      	ldr	r2, [pc, #404]	@ (80006a8 <MX_GPIO_Init+0x248>)
 8000514:	f043 0308 	orr.w	r3, r3, #8
 8000518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800051c:	4b62      	ldr	r3, [pc, #392]	@ (80006a8 <MX_GPIO_Init+0x248>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000522:	f003 0308 	and.w	r3, r3, #8
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800052a:	4b5f      	ldr	r3, [pc, #380]	@ (80006a8 <MX_GPIO_Init+0x248>)
 800052c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000530:	4a5d      	ldr	r2, [pc, #372]	@ (80006a8 <MX_GPIO_Init+0x248>)
 8000532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000536:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800053a:	4b5b      	ldr	r3, [pc, #364]	@ (80006a8 <MX_GPIO_Init+0x248>)
 800053c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800054e:	4857      	ldr	r0, [pc, #348]	@ (80006ac <MX_GPIO_Init+0x24c>)
 8000550:	f000 fd48 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|LD2_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f240 4102 	movw	r1, #1026	@ 0x402
 800055a:	4855      	ldr	r0, [pc, #340]	@ (80006b0 <MX_GPIO_Init+0x250>)
 800055c:	f000 fd42 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000566:	4853      	ldr	r0, [pc, #332]	@ (80006b4 <MX_GPIO_Init+0x254>)
 8000568:	f000 fd3c 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	4619      	mov	r1, r3
 8000580:	484d      	ldr	r0, [pc, #308]	@ (80006b8 <MX_GPIO_Init+0x258>)
 8000582:	f000 fb7f 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000586:	2332      	movs	r3, #50	@ 0x32
 8000588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	2302      	movs	r3, #2
 800058c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000596:	230b      	movs	r3, #11
 8000598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	4619      	mov	r1, r3
 80005a0:	4845      	ldr	r0, [pc, #276]	@ (80006b8 <MX_GPIO_Init+0x258>)
 80005a2:	f000 fb6f 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80005a6:	2386      	movs	r3, #134	@ 0x86
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005b6:	230b      	movs	r3, #11
 80005b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	483e      	ldr	r0, [pc, #248]	@ (80006bc <MX_GPIO_Init+0x25c>)
 80005c2:	f000 fb5f 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80005c6:	f244 0301 	movw	r3, #16385	@ 0x4001
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4619      	mov	r1, r3
 80005de:	4833      	ldr	r0, [pc, #204]	@ (80006ac <MX_GPIO_Init+0x24c>)
 80005e0:	f000 fb50 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|LD2_Pin;
 80005e4:	f240 4302 	movw	r3, #1026	@ 0x402
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	482c      	ldr	r0, [pc, #176]	@ (80006b0 <MX_GPIO_Init+0x250>)
 80005fe:	f000 fb41 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000602:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000614:	230b      	movs	r3, #11
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4823      	ldr	r0, [pc, #140]	@ (80006ac <MX_GPIO_Init+0x24c>)
 8000620:	f000 fb30 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000624:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000636:	2307      	movs	r3, #7
 8000638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4619      	mov	r1, r3
 8000640:	481c      	ldr	r0, [pc, #112]	@ (80006b4 <MX_GPIO_Init+0x254>)
 8000642:	f000 fb1f 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <MX_GPIO_Init+0x254>)
 8000660:	f000 fb10 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000668:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <MX_GPIO_Init+0x260>)
 800067a:	f000 fb03 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800067e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000690:	230a      	movs	r3, #10
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <MX_GPIO_Init+0x25c>)
 800069c:	f000 faf2 	bl	8000c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a0:	bf00      	nop
 80006a2:	3730      	adds	r7, #48	@ 0x30
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	58024400 	.word	0x58024400
 80006ac:	58020400 	.word	0x58020400
 80006b0:	58021000 	.word	0x58021000
 80006b4:	58020c00 	.word	0x58020c00
 80006b8:	58020800 	.word	0x58020800
 80006bc:	58020000 	.word	0x58020000
 80006c0:	58021800 	.word	0x58021800

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <HAL_MspInit+0x30>)
 80006d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006dc:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <HAL_MspInit+0x30>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_MspInit+0x30>)
 80006e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58024400 	.word	0x58024400

08000704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000714:	d116      	bne.n	8000744 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <HAL_TIM_Base_MspInit+0x48>)
 8000718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800071c:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <HAL_TIM_Base_MspInit+0x48>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_TIM_Base_MspInit+0x48>)
 8000728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	201c      	movs	r0, #28
 800073a:	f000 fa6e 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800073e:	201c      	movs	r0, #28
 8000740:	f000 fa85 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58024400 	.word	0x58024400

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <MemManage_Handler+0x4>

08000768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <UsageFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f931 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <TIM2_IRQHandler+0x10>)
 80007b6:	f001 fc4a 	bl	800204e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2400002c 	.word	0x2400002c

080007c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007c8:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <SystemInit+0xe4>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ce:	4a36      	ldr	r2, [pc, #216]	@ (80008a8 <SystemInit+0xe4>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d8:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <SystemInit+0xe8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d807      	bhi.n	80007f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007e4:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <SystemInit+0xe8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f023 030f 	bic.w	r3, r3, #15
 80007ec:	4a2f      	ldr	r2, [pc, #188]	@ (80008ac <SystemInit+0xe8>)
 80007ee:	f043 0307 	orr.w	r3, r3, #7
 80007f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <SystemInit+0xec>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a2d      	ldr	r2, [pc, #180]	@ (80008b0 <SystemInit+0xec>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000800:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <SystemInit+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000806:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <SystemInit+0xec>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4929      	ldr	r1, [pc, #164]	@ (80008b0 <SystemInit+0xec>)
 800080c:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <SystemInit+0xf0>)
 800080e:	4013      	ands	r3, r2
 8000810:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000812:	4b26      	ldr	r3, [pc, #152]	@ (80008ac <SystemInit+0xe8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	2b00      	cmp	r3, #0
 800081c:	d007      	beq.n	800082e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800081e:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <SystemInit+0xe8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f023 030f 	bic.w	r3, r3, #15
 8000826:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <SystemInit+0xe8>)
 8000828:	f043 0307 	orr.w	r3, r3, #7
 800082c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <SystemInit+0xec>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000834:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <SystemInit+0xec>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <SystemInit+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <SystemInit+0xec>)
 8000842:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <SystemInit+0xf4>)
 8000844:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <SystemInit+0xec>)
 8000848:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <SystemInit+0xf8>)
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <SystemInit+0xec>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <SystemInit+0xfc>)
 8000850:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <SystemInit+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <SystemInit+0xec>)
 800085a:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <SystemInit+0xfc>)
 800085c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <SystemInit+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <SystemInit+0xec>)
 8000866:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <SystemInit+0xfc>)
 8000868:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <SystemInit+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <SystemInit+0xec>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <SystemInit+0xec>)
 8000876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800087a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <SystemInit+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <SystemInit+0x100>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <SystemInit+0x104>)
 8000888:	4013      	ands	r3, r2
 800088a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800088e:	d202      	bcs.n	8000896 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <SystemInit+0x108>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <SystemInit+0x10c>)
 8000898:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800089c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	52002000 	.word	0x52002000
 80008b0:	58024400 	.word	0x58024400
 80008b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80008b8:	02020200 	.word	0x02020200
 80008bc:	01ff0000 	.word	0x01ff0000
 80008c0:	01010280 	.word	0x01010280
 80008c4:	5c001000 	.word	0x5c001000
 80008c8:	ffff0000 	.word	0xffff0000
 80008cc:	51008108 	.word	0x51008108
 80008d0:	52004000 	.word	0x52004000

080008d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800090c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f7ff ff74 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f001 ffcd 	bl	80028a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000906:	f7ff fce7 	bl	80002d8 <main>
  bx  lr
 800090a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800090c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000910:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000914:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000918:	08002918 	.word	0x08002918
  ldr r2, =_sbss
 800091c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000920:	2400007c 	.word	0x2400007c

08000924 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC3_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092e:	2003      	movs	r0, #3
 8000930:	f000 f968 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000934:	f001 f9ba 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8000938:	4602      	mov	r2, r0
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_Init+0x68>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	4913      	ldr	r1, [pc, #76]	@ (8000994 <HAL_Init+0x6c>)
 8000946:	5ccb      	ldrb	r3, [r1, r3]
 8000948:	f003 031f 	and.w	r3, r3, #31
 800094c:	fa22 f303 	lsr.w	r3, r2, r3
 8000950:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_Init+0x68>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <HAL_Init+0x6c>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	fa22 f303 	lsr.w	r3, r2, r3
 8000968:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <HAL_Init+0x70>)
 800096a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800096c:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <HAL_Init+0x74>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f814 	bl	80009a0 <HAL_InitTick>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e002      	b.n	8000988 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000982:	f7ff fea5 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58024400 	.word	0x58024400
 8000994:	08002900 	.word	0x08002900
 8000998:	24000004 	.word	0x24000004
 800099c:	24000000 	.word	0x24000000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_InitTick+0x60>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d101      	bne.n	80009b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e021      	b.n	80009f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009b4:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <HAL_InitTick+0x64>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_InitTick+0x60>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f94d 	bl	8000c6a <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f917 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <HAL_InitTick+0x68>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2400000c 	.word	0x2400000c
 8000a04:	24000000 	.word	0x24000000
 8000a08:	24000008 	.word	0x24000008

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2400000c 	.word	0x2400000c
 8000a30:	24000078 	.word	0x24000078

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	24000078 	.word	0x24000078

08000a4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <HAL_GetREVID+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	0c1b      	lsrs	r3, r3, #16
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	5c001000 	.word	0x5c001000

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00
 8000aa8:	05fa0000 	.word	0x05fa0000

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	@ 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff29 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff40 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff90 	bl	8000b58 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5f 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff33 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffa4 	bl	8000bc0 <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c92:	4b89      	ldr	r3, [pc, #548]	@ (8000eb8 <HAL_GPIO_Init+0x234>)
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c96:	e194      	b.n	8000fc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8186 	beq.w	8000fbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x44>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	69b9      	ldr	r1, [r7, #24]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80e0 	beq.w	8000fbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <HAL_GPIO_Init+0x238>)
 8000dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e02:	4a2e      	ldr	r2, [pc, #184]	@ (8000ebc <HAL_GPIO_Init+0x238>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <HAL_GPIO_Init+0x238>)
 8000e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1a:	4a29      	ldr	r2, [pc, #164]	@ (8000ec0 <HAL_GPIO_Init+0x23c>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a20      	ldr	r2, [pc, #128]	@ (8000ec4 <HAL_GPIO_Init+0x240>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d052      	beq.n	8000eec <HAL_GPIO_Init+0x268>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec8 <HAL_GPIO_Init+0x244>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d031      	beq.n	8000eb2 <HAL_GPIO_Init+0x22e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1e      	ldr	r2, [pc, #120]	@ (8000ecc <HAL_GPIO_Init+0x248>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d02b      	beq.n	8000eae <HAL_GPIO_Init+0x22a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed0 <HAL_GPIO_Init+0x24c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d025      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <HAL_GPIO_Init+0x250>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x222>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <HAL_GPIO_Init+0x254>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x21e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	@ (8000edc <HAL_GPIO_Init+0x258>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x21a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_GPIO_Init+0x25c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x216>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <HAL_GPIO_Init+0x260>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x212>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <HAL_GPIO_Init+0x264>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x20e>
 8000e8e:	2309      	movs	r3, #9
 8000e90:	e02d      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e92:	230a      	movs	r3, #10
 8000e94:	e02b      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e96:	2308      	movs	r3, #8
 8000e98:	e029      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e027      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	e025      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e023      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e021      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e01f      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e01d      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e01b      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eb6:	bf00      	nop
 8000eb8:	58000080 	.word	0x58000080
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58000400 	.word	0x58000400
 8000ec4:	58020000 	.word	0x58020000
 8000ec8:	58020400 	.word	0x58020400
 8000ecc:	58020800 	.word	0x58020800
 8000ed0:	58020c00 	.word	0x58020c00
 8000ed4:	58021000 	.word	0x58021000
 8000ed8:	58021400 	.word	0x58021400
 8000edc:	58021800 	.word	0x58021800
 8000ee0:	58021c00 	.word	0x58021c00
 8000ee4:	58022000 	.word	0x58022000
 8000ee8:	58022400 	.word	0x58022400
 8000eec:	2300      	movs	r3, #0
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	f002 0203 	and.w	r2, r2, #3
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efe:	4938      	ldr	r1, [pc, #224]	@ (8000fe0 <HAL_GPIO_Init+0x35c>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f ae63 	bne.w	8000c98 <HAL_GPIO_Init+0x14>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3724      	adds	r7, #36	@ 0x24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	58000400 	.word	0x58000400

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_PWREx_ConfigSupply+0x70>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b04      	cmp	r3, #4
 800102a:	d00a      	beq.n	8001042 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HAL_PWREx_ConfigSupply+0x70>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d001      	beq.n	800103e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e01f      	b.n	800107e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e01d      	b.n	800107e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_PWREx_ConfigSupply+0x70>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f023 0207 	bic.w	r2, r3, #7
 800104a:	490f      	ldr	r1, [pc, #60]	@ (8001088 <HAL_PWREx_ConfigSupply+0x70>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4313      	orrs	r3, r2
 8001050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001052:	f7ff fcef 	bl	8000a34 <HAL_GetTick>
 8001056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001058:	e009      	b.n	800106e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800105a:	f7ff fceb 	bl	8000a34 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001068:	d901      	bls.n	800106e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e007      	b.n	800107e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_PWREx_ConfigSupply+0x70>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800107a:	d1ee      	bne.n	800105a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	58024800 	.word	0x58024800

0800108c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	@ 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f000 bc48 	b.w	8001930 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 8088 	beq.w	80011be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ae:	4b99      	ldr	r3, [pc, #612]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010b8:	4b96      	ldr	r3, [pc, #600]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80010ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d007      	beq.n	80010d4 <HAL_RCC_OscConfig+0x48>
 80010c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c6:	2b18      	cmp	r3, #24
 80010c8:	d111      	bne.n	80010ee <HAL_RCC_OscConfig+0x62>
 80010ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d06d      	beq.n	80011bc <HAL_RCC_OscConfig+0x130>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d169      	bne.n	80011bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f000 bc21 	b.w	8001930 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f6:	d106      	bne.n	8001106 <HAL_RCC_OscConfig+0x7a>
 80010f8:	4b86      	ldr	r3, [pc, #536]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a85      	ldr	r2, [pc, #532]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80010fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e02e      	b.n	8001164 <HAL_RCC_OscConfig+0xd8>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0x9c>
 800110e:	4b81      	ldr	r3, [pc, #516]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a80      	ldr	r2, [pc, #512]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b7e      	ldr	r3, [pc, #504]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a7d      	ldr	r2, [pc, #500]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xd8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0xc0>
 8001132:	4b78      	ldr	r3, [pc, #480]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a77      	ldr	r2, [pc, #476]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b75      	ldr	r3, [pc, #468]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a74      	ldr	r2, [pc, #464]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xd8>
 800114c:	4b71      	ldr	r3, [pc, #452]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a70      	ldr	r2, [pc, #448]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b6e      	ldr	r3, [pc, #440]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a6d      	ldr	r2, [pc, #436]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fc62 	bl	8000a34 <HAL_GetTick>
 8001170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fc5e 	bl	8000a34 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	@ 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e3d4      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001186:	4b63      	ldr	r3, [pc, #396]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xe8>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fc4e 	bl	8000a34 <HAL_GetTick>
 8001198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fc4a 	bl	8000a34 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	@ 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e3c0      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ae:	4b59      	ldr	r3, [pc, #356]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x110>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80ca 	beq.w	8001360 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011cc:	4b51      	ldr	r3, [pc, #324]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80011d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0x166>
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	2b18      	cmp	r3, #24
 80011e6:	d156      	bne.n	8001296 <HAL_RCC_OscConfig+0x20a>
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d151      	bne.n	8001296 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f2:	4b48      	ldr	r3, [pc, #288]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x17e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e392      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800120a:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 0219 	bic.w	r2, r3, #25
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	493f      	ldr	r1, [pc, #252]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fc0a 	bl	8000a34 <HAL_GetTick>
 8001220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fc06 	bl	8000a34 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e37c      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	f7ff fc03 	bl	8000a4c <HAL_GetREVID>
 8001246:	4603      	mov	r3, r0
 8001248:	f241 0203 	movw	r2, #4099	@ 0x1003
 800124c:	4293      	cmp	r3, r2
 800124e:	d817      	bhi.n	8001280 <HAL_RCC_OscConfig+0x1f4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b40      	cmp	r3, #64	@ 0x40
 8001256:	d108      	bne.n	800126a <HAL_RCC_OscConfig+0x1de>
 8001258:	4b2e      	ldr	r3, [pc, #184]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001260:	4a2c      	ldr	r2, [pc, #176]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001266:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001268:	e07a      	b.n	8001360 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	031b      	lsls	r3, r3, #12
 8001278:	4926      	ldr	r1, [pc, #152]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127e:	e06f      	b.n	8001360 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	4921      	ldr	r1, [pc, #132]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001294:	e064      	b.n	8001360 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d047      	beq.n	800132e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800129e:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 0219 	bic.w	r2, r3, #25
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	491a      	ldr	r1, [pc, #104]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fbc0 	bl	8000a34 <HAL_GetTick>
 80012b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b8:	f7ff fbbc 	bl	8000a34 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e332      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	f7ff fbb9 	bl	8000a4c <HAL_GetREVID>
 80012da:	4603      	mov	r3, r0
 80012dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d819      	bhi.n	8001318 <HAL_RCC_OscConfig+0x28c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b40      	cmp	r3, #64	@ 0x40
 80012ea:	d108      	bne.n	80012fe <HAL_RCC_OscConfig+0x272>
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012f4:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fa:	6053      	str	r3, [r2, #4]
 80012fc:	e030      	b.n	8001360 <HAL_RCC_OscConfig+0x2d4>
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	031b      	lsls	r3, r3, #12
 800130c:	4901      	ldr	r1, [pc, #4]	@ (8001314 <HAL_RCC_OscConfig+0x288>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
 8001312:	e025      	b.n	8001360 <HAL_RCC_OscConfig+0x2d4>
 8001314:	58024400 	.word	0x58024400
 8001318:	4b9a      	ldr	r3, [pc, #616]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	061b      	lsls	r3, r3, #24
 8001326:	4997      	ldr	r1, [pc, #604]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
 800132c:	e018      	b.n	8001360 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	4b95      	ldr	r3, [pc, #596]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a94      	ldr	r2, [pc, #592]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fb7b 	bl	8000a34 <HAL_GetTick>
 800133e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fb77 	bl	8000a34 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e2ed      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001354:	4b8b      	ldr	r3, [pc, #556]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80a9 	beq.w	80014c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800136e:	4b85      	ldr	r3, [pc, #532]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001376:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001378:	4b82      	ldr	r3, [pc, #520]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b08      	cmp	r3, #8
 8001382:	d007      	beq.n	8001394 <HAL_RCC_OscConfig+0x308>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b18      	cmp	r3, #24
 8001388:	d13a      	bne.n	8001400 <HAL_RCC_OscConfig+0x374>
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d135      	bne.n	8001400 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001394:	4b7b      	ldr	r3, [pc, #492]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x320>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	2b80      	cmp	r3, #128	@ 0x80
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e2c1      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ac:	f7ff fb4e 	bl	8000a4c <HAL_GetREVID>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d817      	bhi.n	80013ea <HAL_RCC_OscConfig+0x35e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d108      	bne.n	80013d4 <HAL_RCC_OscConfig+0x348>
 80013c2:	4b70      	ldr	r3, [pc, #448]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80013cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013d2:	e075      	b.n	80014c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	069b      	lsls	r3, r3, #26
 80013e2:	4968      	ldr	r1, [pc, #416]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013e8:	e06a      	b.n	80014c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ea:	4b66      	ldr	r3, [pc, #408]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	061b      	lsls	r3, r3, #24
 80013f8:	4962      	ldr	r1, [pc, #392]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013fe:	e05f      	b.n	80014c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d042      	beq.n	800148e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001408:	4b5e      	ldr	r3, [pc, #376]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a5d      	ldr	r2, [pc, #372]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fb0e 	bl	8000a34 <HAL_GetTick>
 8001418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800141c:	f7ff fb0a 	bl	8000a34 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e280      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800142e:	4b55      	ldr	r3, [pc, #340]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800143a:	f7ff fb07 	bl	8000a4c <HAL_GetREVID>
 800143e:	4603      	mov	r3, r0
 8001440:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001444:	4293      	cmp	r3, r2
 8001446:	d817      	bhi.n	8001478 <HAL_RCC_OscConfig+0x3ec>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	2b20      	cmp	r3, #32
 800144e:	d108      	bne.n	8001462 <HAL_RCC_OscConfig+0x3d6>
 8001450:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001458:	4a4a      	ldr	r2, [pc, #296]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800145a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800145e:	6053      	str	r3, [r2, #4]
 8001460:	e02e      	b.n	80014c0 <HAL_RCC_OscConfig+0x434>
 8001462:	4b48      	ldr	r3, [pc, #288]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	069b      	lsls	r3, r3, #26
 8001470:	4944      	ldr	r1, [pc, #272]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
 8001476:	e023      	b.n	80014c0 <HAL_RCC_OscConfig+0x434>
 8001478:	4b42      	ldr	r3, [pc, #264]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	493f      	ldr	r1, [pc, #252]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	60cb      	str	r3, [r1, #12]
 800148c:	e018      	b.n	80014c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a3c      	ldr	r2, [pc, #240]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff facb 	bl	8000a34 <HAL_GetTick>
 800149e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014a2:	f7ff fac7 	bl	8000a34 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e23d      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014b4:	4b33      	ldr	r3, [pc, #204]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d036      	beq.n	800153a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d019      	beq.n	8001508 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff faa8 	bl	8000a34 <HAL_GetTick>
 80014e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff faa4 	bl	8000a34 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e21a      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 80014fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x45c>
 8001506:	e018      	b.n	800153a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fa8e 	bl	8000a34 <HAL_GetTick>
 8001518:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fa8a 	bl	8000a34 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e200      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	2b00      	cmp	r3, #0
 8001544:	d039      	beq.n	80015ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01c      	beq.n	8001588 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001558:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800155a:	f7ff fa6b 	bl	8000a34 <HAL_GetTick>
 800155e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001562:	f7ff fa67 	bl	8000a34 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1dd      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_RCC_OscConfig+0x4f8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x4d6>
 8001580:	e01b      	b.n	80015ba <HAL_RCC_OscConfig+0x52e>
 8001582:	bf00      	nop
 8001584:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001588:	4b9b      	ldr	r3, [pc, #620]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a9a      	ldr	r2, [pc, #616]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800158e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001592:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001594:	f7ff fa4e 	bl	8000a34 <HAL_GetTick>
 8001598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800159c:	f7ff fa4a 	bl	8000a34 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1c0      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ae:	4b92      	ldr	r3, [pc, #584]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8081 	beq.w	80016ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015c8:	4b8c      	ldr	r3, [pc, #560]	@ (80017fc <HAL_RCC_OscConfig+0x770>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a8b      	ldr	r2, [pc, #556]	@ (80017fc <HAL_RCC_OscConfig+0x770>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015d4:	f7ff fa2e 	bl	8000a34 <HAL_GetTick>
 80015d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015dc:	f7ff fa2a 	bl	8000a34 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	@ 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1a0      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ee:	4b83      	ldr	r3, [pc, #524]	@ (80017fc <HAL_RCC_OscConfig+0x770>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x584>
 8001602:	4b7d      	ldr	r3, [pc, #500]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	4a7c      	ldr	r2, [pc, #496]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	@ 0x70
 800160e:	e02d      	b.n	800166c <HAL_RCC_OscConfig+0x5e0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x5a6>
 8001618:	4b77      	ldr	r3, [pc, #476]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	4a76      	ldr	r2, [pc, #472]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	@ 0x70
 8001624:	4b74      	ldr	r3, [pc, #464]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001628:	4a73      	ldr	r2, [pc, #460]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001630:	e01c      	b.n	800166c <HAL_RCC_OscConfig+0x5e0>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b05      	cmp	r3, #5
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c8>
 800163a:	4b6f      	ldr	r3, [pc, #444]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	4a6e      	ldr	r2, [pc, #440]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6713      	str	r3, [r2, #112]	@ 0x70
 8001646:	4b6c      	ldr	r3, [pc, #432]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	4a6b      	ldr	r2, [pc, #428]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6713      	str	r3, [r2, #112]	@ 0x70
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0x5e0>
 8001654:	4b68      	ldr	r3, [pc, #416]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001658:	4a67      	ldr	r2, [pc, #412]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001660:	4b65      	ldr	r3, [pc, #404]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001664:	4a64      	ldr	r2, [pc, #400]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001666:	f023 0304 	bic.w	r3, r3, #4
 800166a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d015      	beq.n	80016a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff f9de 	bl	8000a34 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff f9da 	bl	8000a34 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e14e      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001692:	4b59      	ldr	r3, [pc, #356]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0ee      	beq.n	800167c <HAL_RCC_OscConfig+0x5f0>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff f9c8 	bl	8000a34 <HAL_GetTick>
 80016a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff f9c4 	bl	8000a34 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e138      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016be:	4b4e      	ldr	r3, [pc, #312]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ee      	bne.n	80016a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 812d 	beq.w	800192e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016d4:	4b48      	ldr	r3, [pc, #288]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016dc:	2b18      	cmp	r3, #24
 80016de:	f000 80bd 	beq.w	800185c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	f040 809e 	bne.w	8001828 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ec:	4b42      	ldr	r3, [pc, #264]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a41      	ldr	r2, [pc, #260]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80016f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff f99c 	bl	8000a34 <HAL_GetTick>
 80016fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff f998 	bl	8000a34 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e10e      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001712:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171e:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001722:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <HAL_RCC_OscConfig+0x774>)
 8001724:	4013      	ands	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	430a      	orrs	r2, r1
 8001732:	4931      	ldr	r1, [pc, #196]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001734:	4313      	orrs	r3, r2
 8001736:	628b      	str	r3, [r1, #40]	@ 0x28
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	3b01      	subs	r3, #1
 800173e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001746:	3b01      	subs	r3, #1
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	b29b      	uxth	r3, r3
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001752:	3b01      	subs	r3, #1
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001760:	3b01      	subs	r3, #1
 8001762:	061b      	lsls	r3, r3, #24
 8001764:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001768:	4923      	ldr	r1, [pc, #140]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001772:	4a21      	ldr	r2, [pc, #132]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800177a:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800177c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800177e:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <HAL_RCC_OscConfig+0x778>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001786:	00d2      	lsls	r2, r2, #3
 8001788:	491b      	ldr	r1, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800178a:	4313      	orrs	r3, r2
 800178c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800178e:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	f023 020c 	bic.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4917      	ldr	r1, [pc, #92]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 800179c:	4313      	orrs	r3, r2
 800179e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a4:	f023 0202 	bic.w	r2, r3, #2
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	4912      	ldr	r1, [pc, #72]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c2:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017da:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e2:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_RCC_OscConfig+0x76c>)
 80017e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff f921 	bl	8000a34 <HAL_GetTick>
 80017f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017f4:	e011      	b.n	800181a <HAL_RCC_OscConfig+0x78e>
 80017f6:	bf00      	nop
 80017f8:	58024400 	.word	0x58024400
 80017fc:	58024800 	.word	0x58024800
 8001800:	fffffc0c 	.word	0xfffffc0c
 8001804:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff f914 	bl	8000a34 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e08a      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x77c>
 8001826:	e082      	b.n	800192e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b43      	ldr	r3, [pc, #268]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a42      	ldr	r2, [pc, #264]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 800182e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff f8fe 	bl	8000a34 <HAL_GetTick>
 8001838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f8fa 	bl	8000a34 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e070      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800184e:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x7b0>
 800185a:	e068      	b.n	800192e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800185c:	4b36      	ldr	r3, [pc, #216]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001862:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	2b01      	cmp	r3, #1
 800186e:	d031      	beq.n	80018d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0203 	and.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d12a      	bne.n	80018d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d122      	bne.n	80018d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11a      	bne.n	80018d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0a5b      	lsrs	r3, r3, #9
 80018a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d111      	bne.n	80018d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d108      	bne.n	80018d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	0e1b      	lsrs	r3, r3, #24
 80018c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e02b      	b.n	8001930 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018d8:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 80018da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d01f      	beq.n	800192e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	4a11      	ldr	r2, [pc, #68]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018fa:	f7ff f89b 	bl	8000a34 <HAL_GetTick>
 80018fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001900:	bf00      	nop
 8001902:	f7ff f897 	bl	8000a34 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	4293      	cmp	r3, r2
 800190c:	d0f9      	beq.n	8001902 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 8001910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_RCC_OscConfig+0x8b0>)
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800191a:	00d2      	lsls	r2, r2, #3
 800191c:	4906      	ldr	r1, [pc, #24]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 800191e:	4313      	orrs	r3, r2
 8001920:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 8001924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001926:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <HAL_RCC_OscConfig+0x8ac>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3730      	adds	r7, #48	@ 0x30
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	58024400 	.word	0x58024400
 800193c:	ffff0007 	.word	0xffff0007

08001940 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e19c      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b8a      	ldr	r3, [pc, #552]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d910      	bls.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b87      	ldr	r3, [pc, #540]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 020f 	bic.w	r2, r3, #15
 800196a:	4985      	ldr	r1, [pc, #532]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b83      	ldr	r3, [pc, #524]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e184      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d010      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	4b7b      	ldr	r3, [pc, #492]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800199c:	429a      	cmp	r2, r3
 800199e:	d908      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019a0:	4b78      	ldr	r3, [pc, #480]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	4975      	ldr	r1, [pc, #468]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	4b70      	ldr	r3, [pc, #448]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d908      	bls.n	80019e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	496a      	ldr	r1, [pc, #424]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d010      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699a      	ldr	r2, [r3, #24]
 80019f0:	4b64      	ldr	r3, [pc, #400]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d908      	bls.n	8001a0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019fc:	4b61      	ldr	r3, [pc, #388]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	495e      	ldr	r1, [pc, #376]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d010      	beq.n	8001a3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69da      	ldr	r2, [r3, #28]
 8001a1e:	4b59      	ldr	r3, [pc, #356]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d908      	bls.n	8001a3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a2a:	4b56      	ldr	r3, [pc, #344]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4953      	ldr	r1, [pc, #332]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d908      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f023 020f 	bic.w	r2, r3, #15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4947      	ldr	r1, [pc, #284]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d055      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a76:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4940      	ldr	r1, [pc, #256]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a90:	4b3c      	ldr	r3, [pc, #240]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d121      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0f6      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aa8:	4b36      	ldr	r3, [pc, #216]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d115      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0ea      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ac0:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0de      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0d6      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae0:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f023 0207 	bic.w	r2, r3, #7
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4925      	ldr	r1, [pc, #148]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af2:	f7fe ff9f 	bl	8000a34 <HAL_GetTick>
 8001af6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afa:	f7fe ff9b 	bl	8000a34 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0be      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d1eb      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d010      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d208      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f023 020f 	bic.w	r2, r3, #15
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	490e      	ldr	r1, [pc, #56]	@ (8001b84 <HAL_RCC_ClockConfig+0x244>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d214      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	4906      	ldr	r1, [pc, #24]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <HAL_RCC_ClockConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e086      	b.n	8001c8e <HAL_RCC_ClockConfig+0x34e>
 8001b80:	52002000 	.word	0x52002000
 8001b84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d208      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	4939      	ldr	r1, [pc, #228]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	4b34      	ldr	r3, [pc, #208]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d208      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	492e      	ldr	r1, [pc, #184]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d208      	bcs.n	8001c12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4922      	ldr	r1, [pc, #136]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d010      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d208      	bcs.n	8001c40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4917      	ldr	r1, [pc, #92]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c40:	f000 f834 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	4912      	ldr	r1, [pc, #72]	@ (8001c9c <HAL_RCC_ClockConfig+0x35c>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_RCC_ClockConfig+0x358>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <HAL_RCC_ClockConfig+0x35c>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x360>)
 8001c76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_RCC_ClockConfig+0x364>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_RCC_ClockConfig+0x368>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fe8c 	bl	80009a0 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	08002900 	.word	0x08002900
 8001ca0:	24000004 	.word	0x24000004
 8001ca4:	24000000 	.word	0x24000000
 8001ca8:	24000008 	.word	0x24000008

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb2:	4bb3      	ldr	r3, [pc, #716]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	f200 8155 	bhi.w	8001f6a <HAL_RCC_GetSysClockFreq+0x2be>
 8001cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001d2d 	.word	0x08001d2d
 8001ccc:	08001f6b 	.word	0x08001f6b
 8001cd0:	08001f6b 	.word	0x08001f6b
 8001cd4:	08001f6b 	.word	0x08001f6b
 8001cd8:	08001f6b 	.word	0x08001f6b
 8001cdc:	08001f6b 	.word	0x08001f6b
 8001ce0:	08001f6b 	.word	0x08001f6b
 8001ce4:	08001f6b 	.word	0x08001f6b
 8001ce8:	08001d53 	.word	0x08001d53
 8001cec:	08001f6b 	.word	0x08001f6b
 8001cf0:	08001f6b 	.word	0x08001f6b
 8001cf4:	08001f6b 	.word	0x08001f6b
 8001cf8:	08001f6b 	.word	0x08001f6b
 8001cfc:	08001f6b 	.word	0x08001f6b
 8001d00:	08001f6b 	.word	0x08001f6b
 8001d04:	08001f6b 	.word	0x08001f6b
 8001d08:	08001d59 	.word	0x08001d59
 8001d0c:	08001f6b 	.word	0x08001f6b
 8001d10:	08001f6b 	.word	0x08001f6b
 8001d14:	08001f6b 	.word	0x08001f6b
 8001d18:	08001f6b 	.word	0x08001f6b
 8001d1c:	08001f6b 	.word	0x08001f6b
 8001d20:	08001f6b 	.word	0x08001f6b
 8001d24:	08001f6b 	.word	0x08001f6b
 8001d28:	08001d5f 	.word	0x08001d5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d2c:	4b94      	ldr	r3, [pc, #592]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d38:	4b91      	ldr	r3, [pc, #580]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	4a90      	ldr	r2, [pc, #576]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d4a:	e111      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d4c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d4e:	61bb      	str	r3, [r7, #24]
      break;
 8001d50:	e10e      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d52:	4b8d      	ldr	r3, [pc, #564]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d54:	61bb      	str	r3, [r7, #24]
      break;
 8001d56:	e10b      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d58:	4b8c      	ldr	r3, [pc, #560]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d5a:	61bb      	str	r3, [r7, #24]
      break;
 8001d5c:	e108      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d5e:	4b88      	ldr	r3, [pc, #544]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d68:	4b85      	ldr	r3, [pc, #532]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d74:	4b82      	ldr	r3, [pc, #520]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d7e:	4b80      	ldr	r3, [pc, #512]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d82:	08db      	lsrs	r3, r3, #3
 8001d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80e1 	beq.w	8001f64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	f000 8083 	beq.w	8001eb0 <HAL_RCC_GetSysClockFreq+0x204>
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	f200 80a1 	bhi.w	8001ef4 <HAL_RCC_GetSysClockFreq+0x248>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x114>
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d056      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001dbe:	e099      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d02d      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ddc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df6:	4b62      	ldr	r3, [pc, #392]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e26:	e087      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001f94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e3a:	4b51      	ldr	r3, [pc, #324]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e6a:	e065      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001f98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7e:	4b40      	ldr	r3, [pc, #256]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eae:	e043      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001f9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ed6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ef2:	e021      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	0a5b      	lsrs	r3, r3, #9
 8001f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f42:	3301      	adds	r3, #1
 8001f44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f62:	e005      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
      break;
 8001f68:	e002      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f6c:	61bb      	str	r3, [r7, #24]
      break;
 8001f6e:	bf00      	nop
  }

  return sysclockfreq;
 8001f70:	69bb      	ldr	r3, [r7, #24]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	58024400 	.word	0x58024400
 8001f84:	03d09000 	.word	0x03d09000
 8001f88:	003d0900 	.word	0x003d0900
 8001f8c:	017d7840 	.word	0x017d7840
 8001f90:	46000000 	.word	0x46000000
 8001f94:	4c742400 	.word	0x4c742400
 8001f98:	4a742400 	.word	0x4a742400
 8001f9c:	4bbebc20 	.word	0x4bbebc20

08001fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e049      	b.n	8002046 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fb9c 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f000 fa66 	bl	80024b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01b      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0202 	mvn.w	r2, #2
 8002082:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9eb 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 800209e:	e005      	b.n	80020ac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f9dd 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f9ee 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01b      	beq.n	80020fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f06f 0204 	mvn.w	r2, #4
 80020ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f9c5 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 80020ea:	e005      	b.n	80020f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f9b7 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f9c8 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01b      	beq.n	800214a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0208 	mvn.w	r2, #8
 800211a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2204      	movs	r2, #4
 8002120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f99f 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8002136:	e005      	b.n	8002144 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f991 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f9a2 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01b      	beq.n	8002196 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f06f 0210 	mvn.w	r2, #16
 8002166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2208      	movs	r2, #8
 800216c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f979 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8002182:	e005      	b.n	8002190 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f96b 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f97c 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00c      	beq.n	80021ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f06f 0201 	mvn.w	r2, #1
 80021b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f949 	bl	800244c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fb40 	bl	8002868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fb38 	bl	800287c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f936 	bl	800249c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0220 	mvn.w	r2, #32
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fb00 	bl	8002854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_TIM_ConfigClockSource+0x1c>
 8002274:	2302      	movs	r3, #2
 8002276:	e0dc      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x1d6>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4b6a      	ldr	r3, [pc, #424]	@ (800243c <HAL_TIM_ConfigClockSource+0x1e0>)
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800229e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a64      	ldr	r2, [pc, #400]	@ (8002440 <HAL_TIM_ConfigClockSource+0x1e4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f000 80a9 	beq.w	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 80022b4:	4a62      	ldr	r2, [pc, #392]	@ (8002440 <HAL_TIM_ConfigClockSource+0x1e4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f200 80ae 	bhi.w	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 80022bc:	4a61      	ldr	r2, [pc, #388]	@ (8002444 <HAL_TIM_ConfigClockSource+0x1e8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	f000 80a1 	beq.w	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 80022c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002444 <HAL_TIM_ConfigClockSource+0x1e8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	f200 80a6 	bhi.w	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 80022cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002448 <HAL_TIM_ConfigClockSource+0x1ec>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	f000 8099 	beq.w	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 80022d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002448 <HAL_TIM_ConfigClockSource+0x1ec>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	f200 809e 	bhi.w	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 80022dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80022e0:	f000 8091 	beq.w	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 80022e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80022e8:	f200 8096 	bhi.w	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 80022ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022f0:	f000 8089 	beq.w	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 80022f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022f8:	f200 808e 	bhi.w	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 80022fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002300:	d03e      	beq.n	8002380 <HAL_TIM_ConfigClockSource+0x124>
 8002302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002306:	f200 8087 	bhi.w	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230e:	f000 8086 	beq.w	800241e <HAL_TIM_ConfigClockSource+0x1c2>
 8002312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002316:	d87f      	bhi.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 8002318:	2b70      	cmp	r3, #112	@ 0x70
 800231a:	d01a      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xf6>
 800231c:	2b70      	cmp	r3, #112	@ 0x70
 800231e:	d87b      	bhi.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 8002320:	2b60      	cmp	r3, #96	@ 0x60
 8002322:	d050      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0x16a>
 8002324:	2b60      	cmp	r3, #96	@ 0x60
 8002326:	d877      	bhi.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 8002328:	2b50      	cmp	r3, #80	@ 0x50
 800232a:	d03c      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x14a>
 800232c:	2b50      	cmp	r3, #80	@ 0x50
 800232e:	d873      	bhi.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 8002330:	2b40      	cmp	r3, #64	@ 0x40
 8002332:	d058      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0x18a>
 8002334:	2b40      	cmp	r3, #64	@ 0x40
 8002336:	d86f      	bhi.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 8002338:	2b30      	cmp	r3, #48	@ 0x30
 800233a:	d064      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 800233c:	2b30      	cmp	r3, #48	@ 0x30
 800233e:	d86b      	bhi.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 8002340:	2b20      	cmp	r3, #32
 8002342:	d060      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 8002344:	2b20      	cmp	r3, #32
 8002346:	d867      	bhi.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05c      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 800234c:	2b10      	cmp	r3, #16
 800234e:	d05a      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x1aa>
 8002350:	e062      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002362:	f000 f9c9 	bl	80026f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	609a      	str	r2, [r3, #8]
      break;
 800237e:	e04f      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002390:	f000 f9b2 	bl	80026f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023a2:	609a      	str	r2, [r3, #8]
      break;
 80023a4:	e03c      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	461a      	mov	r2, r3
 80023b4:	f000 f922 	bl	80025fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2150      	movs	r1, #80	@ 0x50
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f97c 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80023c4:	e02c      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023d2:	461a      	mov	r2, r3
 80023d4:	f000 f941 	bl	800265a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2160      	movs	r1, #96	@ 0x60
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f96c 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 80023e4:	e01c      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f2:	461a      	mov	r2, r3
 80023f4:	f000 f902 	bl	80025fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2140      	movs	r1, #64	@ 0x40
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f95c 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 8002404:	e00c      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4619      	mov	r1, r3
 8002410:	4610      	mov	r0, r2
 8002412:	f000 f953 	bl	80026bc <TIM_ITRx_SetConfig>
      break;
 8002416:	e003      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e000      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800241e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	ffceff88 	.word	0xffceff88
 8002440:	00100040 	.word	0x00100040
 8002444:	00100030 	.word	0x00100030
 8002448:	00100020 	.word	0x00100020

0800244c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a46      	ldr	r2, [pc, #280]	@ (80025dc <TIM_Base_SetConfig+0x12c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ce:	d00f      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a43      	ldr	r2, [pc, #268]	@ (80025e0 <TIM_Base_SetConfig+0x130>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a42      	ldr	r2, [pc, #264]	@ (80025e4 <TIM_Base_SetConfig+0x134>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a41      	ldr	r2, [pc, #260]	@ (80025e8 <TIM_Base_SetConfig+0x138>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a40      	ldr	r2, [pc, #256]	@ (80025ec <TIM_Base_SetConfig+0x13c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a35      	ldr	r2, [pc, #212]	@ (80025dc <TIM_Base_SetConfig+0x12c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002510:	d01b      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a32      	ldr	r2, [pc, #200]	@ (80025e0 <TIM_Base_SetConfig+0x130>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d017      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a31      	ldr	r2, [pc, #196]	@ (80025e4 <TIM_Base_SetConfig+0x134>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a30      	ldr	r2, [pc, #192]	@ (80025e8 <TIM_Base_SetConfig+0x138>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00f      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2f      	ldr	r2, [pc, #188]	@ (80025ec <TIM_Base_SetConfig+0x13c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2e      	ldr	r2, [pc, #184]	@ (80025f0 <TIM_Base_SetConfig+0x140>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2d      	ldr	r2, [pc, #180]	@ (80025f4 <TIM_Base_SetConfig+0x144>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2c      	ldr	r2, [pc, #176]	@ (80025f8 <TIM_Base_SetConfig+0x148>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a16      	ldr	r2, [pc, #88]	@ (80025dc <TIM_Base_SetConfig+0x12c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00f      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a18      	ldr	r2, [pc, #96]	@ (80025ec <TIM_Base_SetConfig+0x13c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00b      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <TIM_Base_SetConfig+0x140>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d007      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a16      	ldr	r2, [pc, #88]	@ (80025f4 <TIM_Base_SetConfig+0x144>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d003      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <TIM_Base_SetConfig+0x148>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f023 0201 	bic.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]
  }
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40000800 	.word	0x40000800
 80025e8:	40000c00 	.word	0x40000c00
 80025ec:	40010400 	.word	0x40010400
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800

080025fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f023 0201 	bic.w	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f023 030a 	bic.w	r3, r3, #10
 8002638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800265a:	b480      	push	{r7}
 800265c:	b087      	sub	sp, #28
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 0210 	bic.w	r2, r3, #16
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <TIM_ITRx_SetConfig+0x38>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	f043 0307 	orr.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	ffcfff8f 	.word	0xffcfff8f

080026f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	021a      	lsls	r2, r3, #8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	431a      	orrs	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	609a      	str	r2, [r3, #8]
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800274c:	2302      	movs	r3, #2
 800274e:	e06d      	b.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a30      	ldr	r2, [pc, #192]	@ (8002838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2f      	ldr	r2, [pc, #188]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d108      	bne.n	8002796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800278a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a20      	ldr	r2, [pc, #128]	@ (8002838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d022      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c2:	d01d      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d018      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00e      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a15      	ldr	r2, [pc, #84]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a16      	ldr	r2, [pc, #88]	@ (800284c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a15      	ldr	r2, [pc, #84]	@ (8002850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d10c      	bne.n	800281a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002806:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	4313      	orrs	r3, r2
 8002810:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40010000 	.word	0x40010000
 800283c:	40010400 	.word	0x40010400
 8002840:	40000400 	.word	0x40000400
 8002844:	40000800 	.word	0x40000800
 8002848:	40000c00 	.word	0x40000c00
 800284c:	40001800 	.word	0x40001800
 8002850:	40014000 	.word	0x40014000

08002854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <memset>:
 8002890:	4402      	add	r2, r0
 8002892:	4603      	mov	r3, r0
 8002894:	4293      	cmp	r3, r2
 8002896:	d100      	bne.n	800289a <memset+0xa>
 8002898:	4770      	bx	lr
 800289a:	f803 1b01 	strb.w	r1, [r3], #1
 800289e:	e7f9      	b.n	8002894 <memset+0x4>

080028a0 <__libc_init_array>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	4d0d      	ldr	r5, [pc, #52]	@ (80028d8 <__libc_init_array+0x38>)
 80028a4:	4c0d      	ldr	r4, [pc, #52]	@ (80028dc <__libc_init_array+0x3c>)
 80028a6:	1b64      	subs	r4, r4, r5
 80028a8:	10a4      	asrs	r4, r4, #2
 80028aa:	2600      	movs	r6, #0
 80028ac:	42a6      	cmp	r6, r4
 80028ae:	d109      	bne.n	80028c4 <__libc_init_array+0x24>
 80028b0:	4d0b      	ldr	r5, [pc, #44]	@ (80028e0 <__libc_init_array+0x40>)
 80028b2:	4c0c      	ldr	r4, [pc, #48]	@ (80028e4 <__libc_init_array+0x44>)
 80028b4:	f000 f818 	bl	80028e8 <_init>
 80028b8:	1b64      	subs	r4, r4, r5
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	2600      	movs	r6, #0
 80028be:	42a6      	cmp	r6, r4
 80028c0:	d105      	bne.n	80028ce <__libc_init_array+0x2e>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c8:	4798      	blx	r3
 80028ca:	3601      	adds	r6, #1
 80028cc:	e7ee      	b.n	80028ac <__libc_init_array+0xc>
 80028ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d2:	4798      	blx	r3
 80028d4:	3601      	adds	r6, #1
 80028d6:	e7f2      	b.n	80028be <__libc_init_array+0x1e>
 80028d8:	08002910 	.word	0x08002910
 80028dc:	08002910 	.word	0x08002910
 80028e0:	08002910 	.word	0x08002910
 80028e4:	08002914 	.word	0x08002914

080028e8 <_init>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	bf00      	nop
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr

080028f4 <_fini>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr
